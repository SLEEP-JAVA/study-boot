buildscript {

    ext {
        springBootVersion = '2.1.6.RELEASE'
        querydslPluginVersion = '1.0.10'
        asciidoctorPluginVersion = '1.5.8'
        snippetsDir = file('build/generated-snippets')
    }
    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.6.RELEASE"
        classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslPluginVersion}"
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:${asciidoctorPluginVersion}"
    }
}

allprojects {
    group 'com.sleep'
    version = '0.0.1-SNAPSHOT'
}

def javaProjects = subprojects - project('frontend')
configure(javaProjects) {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.ewerk.gradle.plugins.querydsl'
    apply plugin: 'org.asciidoctor.convert'

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets {
        integrationTest {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output

            java {
                srcDirs = ['src/integration-test/java']
            }

            resources {
                srcDirs = ['src/integration-test/resources']
            }
        }
    }
    
    dependencies {
        // querydsl
        compileOnly 'com.querydsl:querydsl-apt'
        compileOnly 'com.querydsl:querydsl-jpa'
        
        compileOnly 'org.projectlombok:lombok:1.18.8'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        runtimeOnly 'com.h2database:h2'
        runtimeOnly 'mysql:mysql-connector-java'
        annotationProcessor 'org.projectlombok:lombok'
    }
    
    // querydsl
    def querydslSrcDir = 'src/main/generated'

    querydsl {
        library = 'com.querydsl:querydsl-apt'
        jpa = true
        querydslSourcesDir = querydslSrcDir
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java', querydslSrcDir]
            }
        }
    }

    compileQuerydsl{
        options.annotationProcessorPath = configurations.querydsl
    }

    configurations {
        querydsl.extendsFrom compileClasspath
    }

    // asciidoctor
    asciidoctor {
        attributes 'snippets': file('build/generated-snippets')
        dependsOn test
    }

}

